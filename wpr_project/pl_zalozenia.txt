Pomysł: Internetowy serwis gier (a'la Kurnik)

Serwis gier oferuje możliwość grania z innymi graczami. Są dwie proste gry: warcaby i UNO.
Wybór gry powoduje ukazanie się listy pokoi oraz możliwość stworzenia własnego pokoju.
Przy zakładaniu pokoju należy podać jego nazwę oraz opcjonalnie hasło.
Każdy może dołączyć do pokoju jeżeli są wolne miejsca. Jeżeli pokój wymaga podania hasła, podane musi zostać poprawne hasło.
Hasła są hashowane i nie ma możliwości odczytania ich bezpośrednio z bazy. Administratorzy mogą obserwować grę, również kiedy pokój jest pełny.
Twórca pokoju może wyrzucić dowolnego gracza według uznania przed rozpoczęciem gry.
Opuszczenie pokoju przez jego twórcę powoduje zakończenie gry oraz wypromowanie drugiego dołączonego użytkownika na nowego hosta pokoju.
Host pokoju może przekazać uprawnienia hosta pokoju innemu graczowi.
W pokoju dostępny jest czat do wysyłania wiadomości tekstowych. Tylko zalogowani użytkownicy mogą pisać na czacie.
Wszystkie wiadomości są zapisywane w logu.
Zalogowany gracz w każdej grze posiada ranking: ile gier wygrał, przegrał oraz ile zakończyło się remisem.
Gracz ma możliwość zmiany swojego awataru oraz nazwy użytkownika po założeniu profilu.
Na stronie dostępny jest panel administracyjny.
Istnieją różne typy kont:
- administrator (może wszystko - sprawdzać logi, pobrać bazę danych, listę i statystyki graczy, usuwać konta, nakładać blokadę na czat, itd.),
- zalogowany (może tworzyć pokoje, pisać na czacie, sprawdzić swoje statystyki i wybrać nazwę oraz zdjęcie profilowe, a także zresetować hasło),
- gość (może tylko grać).
Pokoje, użytkownicy oraz logi powinny być przechowywane w bazie danych, a obrazki profilowe jako pliki.





users: id, name, type, password, last_active, profile_picture
- Użytkownicy (wliczając gości)
- type: "guest", "user" lub "admin"
- goście: name generowane, password null (tylko po sesji), profile_picture null

sessions: user_id, token
- Sesje zalogowanych użytkowników (w tym gości)
- Tokeny przechowywane jako ciasteczka lub sesje?

bans: id, user_id, end_date, reason
- Lista banów nałożonych na użytkowników

rooms: id, name, password, game_id
- Lista pokoi
- Pokoje są usuwane gdy ostatni gracz wyjdzie
- Przy tworzeniu pokoju od razu jest tworzona gra i wrzucana w game_id

room_players: room_id, user_id, owner
- Asocjowanie pokojów z graczami
- Wpisy usuwane razem z pokojami

games: id, type, start_time, end_time
- Lista rozegranych gier
- Gry nie są kasowane po zakończeniu
- type: "checkers" - warcaby, "uno" - uno
- start_time: null jeżeli gra nie została jeszcze rozpoczęta
- end_time: null jeżeli gra nie została jeszcze zakończona

game_players: game_id, user_id, index, status
- Asocjowanie gier z graczami
- Gracze są dodawani do gry w momencie jej rozpoczęcia. Przydzielanie indeksów.
- Listy graczy w grze nie można zmienić! Ktoś wyjdzie - gra przerwana.
- index: indeks gracza, zawsze od 1 do n, używane do wskazywania graczy w grach (np. kogo ruch)
- status: null jeżeli gra trwa/została przerwana, 1 - wygrana, -1 - przegrana, 0 - remis

game_states: game_id, state_id, value
- Zmienne przechowujące stan gier (tylko gry które obecnie trwają)
- state_id, value: Value jest VARBINARY(256) albo blob + serialize. Na przykład:
	- checkers:
		- turn (0x01 lub 0x02)
		- board (64 bajty, 0x00 puste miejsce, 0x01 pionek gracza 1, 0x02 pionek gracza 2)
	- uno:
		- turn (0x01 do 0x04)
		- hand_1 do hand_4 (n bajtów, w zależności od ilości kart):
			- pierwszy nibble: 1 - czerwone, 2 - zielone, 3 - niebieskie, 4 - żółte
			- drugi nibble: 0-9 - wartość, A - stop, B - reverse, C - +2
			- przykład czerwona 5 - 0x15, niebieski stop - 0x3A, żółty uno reverse - 0x4B
			- karty specjalne: 0x00 - zmiana koloru, 0x01 - +4
		- deck (n bajtów, talia kart zakrytych)
		- play_deck (n bajtów, odkładanie kart odkrytych)

messages: id, game_id, timestamp, user, message
- Lista wiadomości wysłanych w grach
- user: null jeżeli wiadomość systemowa









pliki:

db.php - zarządzanie bazą danych (wszystkie zapytania tutaj!)
class/*.php - klasy

index.php - strona główna z listą gier
rooms.php - gra (lista pokoi w grze)
game.php - gra (pojedynczy pokój, główne miejsce akcji)
login.php - formularz logowania
profile.php - profil użytkownika
profile_edit.php - edycja profilu użytkownika
admin/index.php - panel administratora
admin/users.php - lista użytkowników

endpointy do REST:

e/
admin/e/ban.php - zbanuj gracza
admin/e/unban.php - odblokuj gracza